<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. --><project basedir="." default="build" name="MagicalArenaGame">
    <property environment="env"/>
    <property name="ECLIPSE_HOME" value="C:/Users/User/eclipse/jee-2023-09/eclipse/"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.7"/>
    <property name="source" value="1.7"/>
    <path id="Maven Dependencies.libraryclasspath">
        <pathelement location="C:/Users/User/.m2/repository/junit/junit/4.11/junit-4.11.jar"/>
        <pathelement location="C:/Users/User/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar"/>
    </path>
    <path id="MagicalArenaGame.classpath">
        <pathelement location="target/classes"/>
        <pathelement location="target/test-classes"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.Client (2).classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.com.swiggy.MagicalArenaGame.Tests.classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.com.swiggy.MagicalArenaGame.UnitTests.classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.java.classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MagicalArenaGame.classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.TestDie (1).classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.TestMagicalArena.classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.TestMagicalArena.testMagicalArenaExit.classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.TestMagicalArena.testMagicalArenaThrowsGameNotInitializedExceptionIfNotInitialized.classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.TestMagicalArena.testMagicalArenaThrowsInsufficientPlayersException.classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.TestMagicalArena.testMagicalArenaThrowsPlayerLimitReachedException.classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.TestMagicalArena.testMultipleStartGame.classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.TestMagicalArena.testShowGameResultsThrowsExceptionWithoutStartingNewGame.classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.TestMagicalArena.testShowGameResultsWorksAfterStartingNewGame.classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.TestMagicalArena.testStartGame (1).classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.TestMagicalArenaGameValidator.testMagicalArenaThrowsGameValidationException.classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.TestPlayer (2).classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.TestPlayer.testPlayerHealthResets.classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.TestPlayingStrategy.classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.TestPlayingStrategy.testDefenderHealthReducesAndAttackerHealthRemainsSameAfterAttacking.classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.TestPlayingStrategy.testPlayersHealthDoesNotChangeAfterAttacking.classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.TestPlayingStrategy.testPlayerWithLesserHealthIsChoosenFirst.classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.TestUtility.classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.TestUtility.testGenericSwapperSwapsPlayers.classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.TestWinningStrategy.testdetermineWinnerThrowsExceptionWhenBothPlayersAreAlive.classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.TestWinningStrategy.testPlayerWhoIsAliveWins.classpath">
        <path refid="MagicalArenaGame.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <target name="init">
        <mkdir dir="target/classes"/>
        <mkdir dir="target/test-classes"/>
        <copy includeemptydirs="false" todir="target/classes">
            <fileset dir="src/main/java">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="target/classes">
            <fileset dir="src/main/resources">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
                <exclude name="**"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="target/test-classes">
            <fileset dir="src/test/java">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="target/test-classes">
            <fileset dir="src/test/resources">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
                <exclude name="**"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="target/classes"/>
        <delete dir="target/test-classes"/>
    </target>
    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="target/classes" includeantruntime="false" source="${source}" target="${target}">
            <src path="src/main/java"/>
            <src path="src/main/resources"/>
            <exclude name="**"/>
            <classpath refid="MagicalArenaGame.classpath"/>
        </javac>
        <javac debug="true" debuglevel="${debuglevel}" destdir="target/test-classes" includeantruntime="false" source="${source}" target="${target}">
            <src path="src/test/java"/>
            <src path="src/test/resources"/>
            <exclude name="**"/>
            <classpath refid="MagicalArenaGame.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
        <copy todir="${ant.library.dir}">
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </copy>
        <unzip dest="${ant.library.dir}">
            <patternset includes="jdtCompilerAdapter.jar"/>
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </unzip>
    </target>
    <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        <antcall target="build"/>
    </target>
    <target name="Client (2)">
        <java classname="com.swiggy.MagicalArenaGame.Client" failonerror="true" fork="yes">
            <classpath refid="run.Client (2).classpath"/>
        </java>
    </target>
    <target name="com.swiggy.MagicalArenaGame.Tests">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.com.swiggy.MagicalArenaGame.Tests.classpath"/>
        </junit>
    </target>
    <target name="com.swiggy.MagicalArenaGame.UnitTests">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestDie" todir="${junit.output.dir}"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestDieValidator" todir="${junit.output.dir}"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestMagicalArena" todir="${junit.output.dir}"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestMagicalArenaGameValidator" todir="${junit.output.dir}"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestPlayer" todir="${junit.output.dir}"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestPlayerValidator" todir="${junit.output.dir}"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestPlayingStrategy" todir="${junit.output.dir}"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestUtility" todir="${junit.output.dir}"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestWinningStrategy" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.com.swiggy.MagicalArenaGame.UnitTests.classpath"/>
        </junit>
    </target>
    <target name="java">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.java.classpath"/>
        </junit>
    </target>
    <target name="MagicalArenaGame">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestDie" todir="${junit.output.dir}"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestDieValidator" todir="${junit.output.dir}"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestMagicalArena" todir="${junit.output.dir}"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestMagicalArenaGameValidator" todir="${junit.output.dir}"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestPlayer" todir="${junit.output.dir}"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestPlayerValidator" todir="${junit.output.dir}"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestPlayingStrategy" todir="${junit.output.dir}"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestUtility" todir="${junit.output.dir}"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestWinningStrategy" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MagicalArenaGame.classpath"/>
        </junit>
    </target>
    <target name="TestDie (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestDie" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.TestDie (1).classpath"/>
        </junit>
    </target>
    <target name="TestMagicalArena">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestMagicalArena" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.TestMagicalArena.classpath"/>
        </junit>
    </target>
    <target name="TestMagicalArena.testMagicalArenaExit">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestMagicalArena" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.TestMagicalArena.testMagicalArenaExit.classpath"/>
        </junit>
    </target>
    <target name="TestMagicalArena.testMagicalArenaThrowsGameNotInitializedExceptionIfNotInitialized">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestMagicalArena" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.TestMagicalArena.testMagicalArenaThrowsGameNotInitializedExceptionIfNotInitialized.classpath"/>
        </junit>
    </target>
    <target name="TestMagicalArena.testMagicalArenaThrowsInsufficientPlayersException">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestMagicalArena" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.TestMagicalArena.testMagicalArenaThrowsInsufficientPlayersException.classpath"/>
        </junit>
    </target>
    <target name="TestMagicalArena.testMagicalArenaThrowsPlayerLimitReachedException">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestMagicalArena" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.TestMagicalArena.testMagicalArenaThrowsPlayerLimitReachedException.classpath"/>
        </junit>
    </target>
    <target name="TestMagicalArena.testMultipleStartGame">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestMagicalArena" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.TestMagicalArena.testMultipleStartGame.classpath"/>
        </junit>
    </target>
    <target name="TestMagicalArena.testShowGameResultsThrowsExceptionWithoutStartingNewGame">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestMagicalArena" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.TestMagicalArena.testShowGameResultsThrowsExceptionWithoutStartingNewGame.classpath"/>
        </junit>
    </target>
    <target name="TestMagicalArena.testShowGameResultsWorksAfterStartingNewGame">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestMagicalArena" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.TestMagicalArena.testShowGameResultsWorksAfterStartingNewGame.classpath"/>
        </junit>
    </target>
    <target name="TestMagicalArena.testStartGame (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestMagicalArena" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.TestMagicalArena.testStartGame (1).classpath"/>
        </junit>
    </target>
    <target name="TestMagicalArenaGameValidator.testMagicalArenaThrowsGameValidationException">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestMagicalArenaGameValidator" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.TestMagicalArenaGameValidator.testMagicalArenaThrowsGameValidationException.classpath"/>
        </junit>
    </target>
    <target name="TestPlayer (2)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestPlayer" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.TestPlayer (2).classpath"/>
        </junit>
    </target>
    <target name="TestPlayer.testPlayerHealthResets">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestPlayer" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.TestPlayer.testPlayerHealthResets.classpath"/>
        </junit>
    </target>
    <target name="TestPlayingStrategy">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestPlayingStrategy" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.TestPlayingStrategy.classpath"/>
        </junit>
    </target>
    <target name="TestPlayingStrategy.testDefenderHealthReducesAndAttackerHealthRemainsSameAfterAttacking">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestPlayingStrategy" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.TestPlayingStrategy.testDefenderHealthReducesAndAttackerHealthRemainsSameAfterAttacking.classpath"/>
        </junit>
    </target>
    <target name="TestPlayingStrategy.testPlayersHealthDoesNotChangeAfterAttacking">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestPlayingStrategy" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.TestPlayingStrategy.testPlayersHealthDoesNotChangeAfterAttacking.classpath"/>
        </junit>
    </target>
    <target name="TestPlayingStrategy.testPlayerWithLesserHealthIsChoosenFirst">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestPlayingStrategy" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.TestPlayingStrategy.testPlayerWithLesserHealthIsChoosenFirst.classpath"/>
        </junit>
    </target>
    <target name="TestUtility">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestUtility" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.TestUtility.classpath"/>
        </junit>
    </target>
    <target name="TestUtility.testGenericSwapperSwapsPlayers">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestUtility" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.TestUtility.testGenericSwapperSwapsPlayers.classpath"/>
        </junit>
    </target>
    <target name="TestWinningStrategy.testdetermineWinnerThrowsExceptionWhenBothPlayersAreAlive">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestWinningStrategy" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.TestWinningStrategy.testdetermineWinnerThrowsExceptionWhenBothPlayersAreAlive.classpath"/>
        </junit>
    </target>
    <target name="TestWinningStrategy.testPlayerWhoIsAliveWins">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.swiggy.MagicalArenaGame.UnitTests.TestWinningStrategy" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.TestWinningStrategy.testPlayerWhoIsAliveWins.classpath"/>
        </junit>
    </target>
    <target name="junitreport">
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.output.dir}"/>
        </junitreport>
    </target>
</project>
